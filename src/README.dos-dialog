----------------------------------------------------
Likely-to-be-FAQ-if-anyone-actually-used-this-script
----------------------------------------------------

Q: HELP! I get:
grep: /root/.dos_history/.last_dos: No such file or directory
grep: /root/.dos_history/.last_dos: No such file or directory
grep: /root/.dos_history/.last_dos: No such file or directory
grep: /root/.dos_history/.last_dos: No such file or directory
grep: /root/.dos_history/.last_dos: No such file or directory
./dos-dialog.sh: line 52: [: =: unary operator expected
./dos-dialog.sh: line 54: [: =: unary operator expected
./dos-dialog.sh: line 56: [: =: unary operator expected
./dos-dialog.sh: line 58: [: =: unary operator expected
Answer:
Run ./dos-dialog Install and try again.
It occurs when the files expected are not found, running the install parameter will create these files.

-----
About
-----

The script, dos-dialog.sh, was created as an initiative to stop Donclurd from just using the Windows
machine by making it convenient to perform the critical function of knocking people off the internet.
It has since evolved into a fully featured program that has botnet functionality and can use many
protocols to attack another server on the internet.

Much of the interface is powered via dialog and the attacking is done via hping3.

--------------
Pre-requisites
--------------

You should have a fully featured shell environment like bash as well as dialog and hping3.
Netcat is required for the botnet functions.

-------
Install
-------

It is possible to check that all the requisite software is installed and install the required files for the script
to work via the install parameter. By doing ./dos-dialog.sh Install it'll inform the user of the status
of the files/folders required and check whether dialog and hping3 are present.

It does not give instructions on how to install both programs and it also is not guaranteed to work on
other systems than the ones we use (Ubuntu). Dialog and hping3 are not included by default in the system
but in Ubuntu's repos both are present.

-----
Usage
-----
(Not case sensitive)

dos-dialog.sh Install - perform the install functions to make sure that the script will work.

dos-dialog.sh Unattended - automatically perform the DoS using the previous parameters.

dos-dialog.sh History - offer the user to redo past attacks. Optionally takes an argument to run with a file
automatically, instead of having to choose.

dos-dialog.sh Master - read data from ~/.dos_history/.ip_list to connect to other machines to perform the attack.

dos-dialog.sh Stop - read data from ~/.dos_history/.ip_list and send a stop command to the other machines.

dos-dialog.sh Add - Add machines to ~/.dos_history/.ip_list

dos-dialog.sh - Launch standalone attack with GUI options. Options will be populated with the last attack
parameters, otherwise if you've performed install they should be replaced with example information.

------
Botnet
------

Specific functionality with this requires that the user have netcat installed and permission to open sockets.

The remote-stop.sh script should either run as a daemon or just in a screen/TTY that won't close.
It accepts two pieces of data at the moment, "stop hping3 slave_passphrase" which will stop the attack, and
"listen start slave_passphrase", which will then close and reopen on the same port and save whatever it receives to
/tmp/dos.tmp and then execute dos-dialog.sh with the parameters "History /tmp/dos.tmp &". dos-dialog.sh will verify
the file exists, if not, it'll exit with exit code 1 and print an error which should be visible in the screen/TTY
as while & forks it to the background, it still shows stdout.

Presumably there's no limit on the amount of machines you can have this setup for, if you have a lot though,
due to the standard delay to take into account lag and such, it might take a while for the script to complete.
Modify dos-dialog.sh to not have a sleep (or shorter sleep) in the function master to remove this delay and just send
it without regard for lag etc.

Authentication involves suffixing the packets to be received by remote-stop to include a configurable string.
This string is the passphrase and acts as a very simple authentication and should not be used to store sensitive
information, since it is NOT encrypted!
Passphrase is stored in remote-stop.sh and set to "default" by default.

Instructions:

On the remote machines, put dos-dialog.sh and remote-stop.sh on them. remote-stop.sh will run in an infinite loop
and is not likely to ever reach a condition that will cause it to exit. I recommend you set it up as an init
script to spawn a screen and launch the script in there: "screen -mdLS screen-name ~/remote-stop.sh" is an example.
Configure remote-stop.sh to have a listening port of your choice (not necessarily required but some servers could
actually be using that port) and also configure the SCRIPT_NAME variable to point to dos-dialog.sh, wherever it may be,
or whatever it is named.

Afterwards on the master server, use ./dos-dialog.sh Add to add all the machines, then test them. You could
test them by doing ./dos-dialog.sh Master; ./dos-dialog.sh Stop
Select your target and the attack should stop fairly instantly as the next command would run straight after.

The botnet feature is a bit more complicated then the rest of the script and tends to get broken fairly easy.
It has been broken for a while but with a small re write to how it works, it seems to work fine again.
I cannot guarantee that this function will work as expected nor or in the future.

If a feature doesn't seem to work, make an issue and include as much detail as possible.
OS version, architecture, any output, etc.

----------------------
UNINSTALLATION/REMOVAL
----------------------

To remove files associated with this script, run it with the parameter remove.

NEITHER I NOR ANY PERSON INVOLVED IN THE CREATION OF THIS SCRIPT TAKE ANY RESPONSIBILITY FOR THE
DAMAGES THAT MAY BE CAUSED BY THE SCRIPT. NO EXCEPTIONS.